# Based on https://github.com/frol/docker-alpine-python-machinelearning
FROM guitarmind/python-nginx
MAINTAINER markpeng@exosite.com

ENV JAVA_HOME=/usr/lib/jvm/java-1.8-openjdk \
    GCC_VERSION=7.4.0 \
    BAZEL_VERSION=0.15.0 \
    TENSORFLOW_VERSION=1.12.0 \
    # Change this if your machine doesn't have that much memory and CPUs
    LOCAL_RESOURCES=10240,6,1.0
    # LOCAL_RESOURCES=2048,4,1.0

RUN apk update && \
    apk add --no-cache \
        --virtual=.build-dependencies \
        g++ \
        gfortran file binutils \
        musl-dev \
        python3-dev cython openblas-dev \
        build-base freetype-dev libpng-dev \
        libffi-dev openssl-dev \
        llvm-dev \
        bash zip \
        openjdk8 \
        patch \
        libexecinfo-dev \
        libc6-compat \
        linux-headers \
        # GCC
        dejagnu \
        isl-dev \
        gmp-dev \
        mpc1-dev \
        mpfr-dev \
        texinfo \
        zlib-dev \
        && \

    apk add --no-cache libstdc++ openblas \
        && \

    ln -s locale.h /usr/include/xlocale.h \
        && \

    # Minimum required packages
    pip install \
        six \
        # https://github.com/tensorflow/tensorflow/issues/30427
        numpy==1.16.4 \
        wheel \
        setuptools \
        mock \
        future>=0.17.1 && \

    # Bazel download and install
    cd /tmp && \
    wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip && \
    mkdir bazel-${BAZEL_VERSION} && \
    unzip -qd bazel-${BAZEL_VERSION} bazel-${BAZEL_VERSION}-dist.zip && \
    cd /tmp/bazel-${BAZEL_VERSION} && \
    sed -i -e 's/-classpath/-J-Xmx8192m -J-Xms128m -classpath/g' scripts/bootstrap/compile.sh && \
    bash compile.sh && \
    cp -p output/bazel /usr/bin/ && \

    # Install right GCC version
    cd /tmp && \
    wget https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.gz && \
    tar -xzf gcc-${GCC_VERSION}.tar.gz && \
    cd /tmp/gcc-${GCC_VERSION} && \
    ./configure \
        --prefix=/usr/local \
        --build=$(uname -m)-alpine-linux-musl \
        --host=$(uname -m)-alpine-linux-musl \
        --target=$(uname -m)-alpine-linux-musl \
        --with-pkgversion="Alpine ${GCC_VERSION}" \
        --enable-checking=release \
        --disable-fixed-point \
        --disable-libmpx \
        --disable-libmudflap \
        --disable-libsanitizer \
        --disable-libssp \
        --disable-libstdcxx-pch \
        --disable-multilib \
        --disable-nls \
        --disable-symvers \
        --disable-werror \
        --enable-__cxa_atexit \
        --enable-default-pie \
        --enable-languages=c,c++ \
        --enable-shared \
        --enable-threads \
        --enable-tls \
        --with-linker-hash-style=gnu \
        --with-system-zlib && \
    make -j $(nproc) && \
    make -j $(nproc) install-strip && \
    gcc -v && \

    # Tensorflow with Intel MKL-DNN for AWS EC2 M5 instnace with Xeon Skylake SP processor (support AVX-512)
    cd /tmp && \
    apk add --no-cache \
        --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing/ \
        hdf5 && \
    apk add --no-cache --virtual .build-edge-deps \
        --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing/ \
        hdf5-dev && \
    pip3 install h5py && \
    pip3 install --no-cache-dir wheel && \
    pip3 install keras_applications==1.0.6 --no-deps && \
    pip3 install keras_preprocessing==1.0.5 --no-deps && \
    pip3 install h5py==2.8.0 && \
    wget -O tensorflow-${TENSORFLOW_VERSION}.tar.gz https://github.com/tensorflow/tensorflow/archive/v${TENSORFLOW_VERSION}.tar.gz && \
    tar xzf tensorflow-${TENSORFLOW_VERSION}.tar.gz && \
    cd /tmp/tensorflow-${TENSORFLOW_VERSION} && \
    sed -i -e '/define TF_GENERATE_BACKTRACE/d' tensorflow/core/platform/default/stacktrace.h && \
    sed -i -e '/define TF_GENERATE_STACKTRACE/d' tensorflow/core/platform/stacktrace_handler.cc && \
    TF_NEED_JEMALLOC=1 \
    TF_NEED_IGNITE=0 \
    TF_NEED_GCP=0 \
    TF_NEED_HDFS=0 \
    TF_NEED_S3=0 \
    TF_ENABLE_XLA=0 \
    TF_NEED_GDR=0 \
    TF_NEED_VERBS=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_CUDA=0 \
    TF_NEED_MPI=0 \
    ./configure && \
    bazel build \
        # No able to compile with MKL yet
        # --config=mkl \
        --config=opt \
        --copt=-march="skylake-avx512" \
        # Another option to exclicitly indicate instructions
        # --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mavx512f --copt=-mavx512pf --copt=-mavx512cd --copt=-mavx512er \
        --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        --local_resources=${LOCAL_RESOURCES} \
        --verbose_failures \
        //tensorflow/tools/pip_package:build_pip_package && \
    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkgs && \
    cp /tmp/tensorflow_pkgs/tensorflow-${TENSORFLOW_VERSION}-cp36-cp36m-linux_x86_64.whl /root && \
    # Copy MKL libraries
    cp /root/.cache/bazel/_bazel_root/*/external/mkl_linux/lib/* /usr/local/lib && \
    # Clean up Bazel cache when done
    bazel clean --expunge --color=yes && \
    cd /root && \
    pip3 install --no-cache-dir \
        /root/tensorflow-${TENSORFLOW_VERSION}-cp36-cp36m-linux_x86_64.whl && \
        python3 -c 'import tensorflow as tf; print("Tensorflow version: {}".format(tf.__version__)); print("Is MKL enabled?{}".format(tf.pywrap_tensorflow.IsMklEnabled()))' && \

    # Cleanup
    rm -rf /var/cache/apk/* && \
    rm -rf /tmp/* && \
    rm -f /usr/bin/bazel && \

    rm -r /root/.cache && \
    find /usr/lib/python3.*/ -name 'tests' -exec rm -r '{}' + && \
    find /usr/lib/python3.*/site-packages/ -name '*.so' -print -exec sh -c 'file "{}" | grep -q "not stripped" && strip -s "{}"' \; \
        && \

    rm /usr/include/xlocale.h \
        && \
    apk del .build-edge-deps && \
    apk del .build-dependencies
