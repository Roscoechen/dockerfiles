# Based on https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/dockerfiles/dockerfiles/devel-cpu.Dockerfile
FROM ubuntu:18.04
MAINTAINER markpeng@exosite.com

ENV BAZEL_VERSION=0.15.0 \
    TENSORFLOW_VERSION=1.12.0 \
    # Change this if your machine doesn't have that much memory and CPUs
    LOCAL_RESOURCES=10240,6,1.0
    # LOCAL_RESOURCES=2048,4,1.0

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        libcurl3-dev \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        rsync \
        software-properties-common \
        sudo \
        unzip \
        zip \
        zlib1g-dev && \

    apt-get install -y \
        python3 \
        python3-pip \
        python3-dev && \

    # Upgrade pip and setuptools
    pip3 --no-cache-dir install --upgrade \
        setuptools && \

    # Some TF tools expect a "python" binary
    ln -s $(which python3) /usr/local/bin/python && \

    apt-get install -y --no-install-recommends \
        build-essential \
        wget \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        swig && \

    # Minimum required packages
    pip3 install \
        six \
        # https://github.com/tensorflow/tensorflow/issues/30427
        numpy==1.16.4 \
        wheel \
        mock \
        enum34 \
        future>=0.17.1 && \

    # Bazel download and install
    cd /tmp && \
    wget https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-dist.zip && \
    mkdir bazel-${BAZEL_VERSION} && \
    unzip -qd bazel-${BAZEL_VERSION} bazel-${BAZEL_VERSION}-dist.zip && \
    cd /tmp/bazel-${BAZEL_VERSION} && \
    sed -i -e 's/-classpath/-J-Xmx8192m -J-Xms128m -classpath/g' scripts/bootstrap/compile.sh && \
    bash compile.sh && \
    cp -p output/bazel /usr/bin/ && \

    # Tensorflow with Intel MKL-DNN for AWS EC2 M5 instnace with Xeon Skylake SP processor (support AVX-512)
    cd /tmp && \
    pip3 install h5py && \
    pip3 install --no-cache-dir wheel && \
    pip3 install keras_applications==1.0.6 --no-deps && \
    pip3 install keras_preprocessing==1.0.5 --no-deps && \
    pip3 install h5py==2.8.0 && \
    wget -O tensorflow-${TENSORFLOW_VERSION}.tar.gz https://github.com/tensorflow/tensorflow/archive/v${TENSORFLOW_VERSION}.tar.gz && \
    tar xzf tensorflow-${TENSORFLOW_VERSION}.tar.gz && \
    cd /tmp/tensorflow-${TENSORFLOW_VERSION} && \
    sed -i -e '/define TF_GENERATE_BACKTRACE/d' tensorflow/core/platform/default/stacktrace.h && \
    sed -i -e '/define TF_GENERATE_STACKTRACE/d' tensorflow/core/platform/stacktrace_handler.cc && \
    TF_NEED_JEMALLOC=1 \
    TF_NEED_IGNITE=0 \
    TF_NEED_GCP=0 \
    TF_NEED_HDFS=0 \
    TF_NEED_S3=0 \
    TF_ENABLE_XLA=0 \
    TF_NEED_GDR=0 \
    TF_NEED_VERBS=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_CUDA=0 \
    TF_NEED_MPI=0 \
    ./configure && \
    bazel build \
        --config=mkl \
        --config=opt \
        --copt=-march="skylake-avx512" \
        # Another option to exclicitly indicate instructions
        # --copt=-mavx --copt=-mavx2 --copt=-mfma --copt=-mavx512f --copt=-mavx512pf --copt=-mavx512cd --copt=-mavx512er \
        --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        --local_resources=${LOCAL_RESOURCES} \
        --verbose_failures \
        //tensorflow/tools/pip_package:build_pip_package && \
    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkgs && \
    cp /tmp/tensorflow_pkgs/tensorflow-${TENSORFLOW_VERSION}-cp36-cp36m-linux_x86_64.whl /root && \
    # Clean up Bazel cache when done
    bazel clean --expunge --color=yes && \
    cd /root && \
    pip3 install --no-cache-dir \
        /root/tensorflow-${TENSORFLOW_VERSION}-cp36-cp36m-linux_x86_64.whl && \
        python3 -c 'import tensorflow as tf; print("Tensorflow version: {}".format(tf.__version__)); print("Is MKL enabled?{}".format(tf.pywrap_tensorflow.IsMklEnabled()))' && \

    # Cleanup
    rm -rf /var/cache/apt/* && \
    rm -rf /tmp/* && \
    rm -f /usr/bin/bazel && \

    rm -r /root/.cache && \
    # find /usr/lib/python3.*/ -name 'tests' -exec rm -r '{}' + && \
    # find /usr/lib/python3.*/site-packages/ -name '*.so' -print -exec sh -c 'file "{}" | grep -q "not stripped" && strip -s "{}"' \; \
    #     && \

    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
